{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","Spotify","getAccessToken","AccessToken","window","location","href","match","ExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessURL","search","searchTerm","fetch","headers","Authorization","then","response","ok","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","trackURIs","userID","method","body","JSON","stringify","playlistID","uris","SearchBar","props","state","term","bind","handleTermChange","this","onSearch","target","setState","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","onRemove","renderAction","TrackList","SearchResults","searchResults","Playlist","handleNameChange","e","onNameChange","defaultValue","onSave","App","playlistTracks","updatePlaylistName","filter","el","find","savedTrack","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAAIA,E,2EAIEC,G,MAAU,CACdC,eADc,WAEZ,GAAIF,EACF,OAAOA,EAGT,IAAMG,EAAcC,OAAOC,SAASC,KAAKC,MAAM,wBACzCC,EAAYJ,OAAOC,SAASC,KAAKC,MAAM,sBAE7C,GAAIJ,GAAeK,EAAW,CAC5BR,EAAcG,EAAY,GAC1B,IAAMM,EAAYC,OAAOF,EAAU,IAGnC,OAFAJ,OAAOO,YAAW,kBAAOX,EAAc,KAAiB,IAAZS,GAC5CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxCb,EAEP,IAAMc,EAAS,2DAlBH,mCAkBG,0EAnBA,8CAoBfV,OAAOC,SAAWS,GAGtBC,OApBc,SAoBPC,GACL,OAAOC,MAAM,kDAAD,OACwCD,GAClD,CACEE,QAAS,CAAEC,cAAc,UAAD,OAAYlB,EAAQC,qBAG7CkB,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,UAGnBH,MAAK,SAACI,GACL,OAAKA,EAGEA,EAAaC,OAAOC,MAAMC,KAAI,SAACC,GACpC,MAAO,CACLC,GAAID,EAAMC,GACVC,KAAMF,EAAME,KACZC,OAAQH,EAAMI,QAAQ,GAAGF,KACzBG,MAAOL,EAAMK,MAAMH,KACnBI,IAAKN,EAAMM,QARN,OAcfC,aAhDc,SAgDDC,EAAcC,GACzB,GAAKD,GAAiBC,EAAtB,CAGA,IAEIC,EAFEtC,EAAcC,EAAQC,iBACtBgB,EAAU,CAAEC,cAAc,UAAD,OAAYnB,IAE3C,OAAOiB,MAAM,gCAAiC,CAAEC,QAASA,IACtDE,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,UAGnBH,MAAK,SAACI,GAEL,OADAc,EAASd,EAAaK,GACfZ,MAAM,oCAAD,OAAqCqB,EAArC,cAAyD,CACnEpB,QAASA,EACTqB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEZ,KAAMM,MAE5BhB,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,UAGnBH,MAAK,SAACI,GACL,IAAMmB,EAAanB,EAAaK,GAChC,OAAOZ,MAAM,wCAAD,OAC8B0B,EAD9B,WAEV,CACEzB,QAASA,EACTqB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBE,KAAMP,gBASTpC,I,eC7DA4C,E,kDA5Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,IAER,EAAKjC,OAAS,EAAKA,OAAOkC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBANP,E,0CAQnB,WACEE,KAAKL,MAAMM,SAASD,KAAKJ,MAAMC,Q,8BAEjC,YAA8B,IAAXK,EAAU,EAAVA,OACjBF,KAAKG,SAAS,CAAEN,KAAMK,EAAOE,U,oBAE/B,WACE,OACE,sBAAKC,UAAU,YAAf,UACE,uBACEC,YAAY,iCACZC,SAAUP,KAAKD,mBAEjB,wBAAQM,UAAU,eAAeG,QAASR,KAAKpC,OAA/C,2B,GAtBgB6C,IAAMC,WC6CfC,G,8DA5Cb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDiB,SAAW,EAAKA,SAASd,KAAd,gBAChB,EAAKe,YAAc,EAAKA,YAAYf,KAAjB,gBAHF,E,gDAMnB,WACE,OAAKE,KAAKL,MAAMmB,UAQd,wBAAQT,UAAU,eAAeG,QAASR,KAAKa,YAA/C,eANE,wBAAQR,UAAU,eAAeG,QAASR,KAAKY,SAA/C,iB,sBAYN,WACEZ,KAAKL,MAAMoB,MAAMf,KAAKL,MAAMlB,S,yBAG9B,WACEuB,KAAKL,MAAMqB,SAAShB,KAAKL,MAAMlB,S,oBAGjC,WACE,OACE,sBAAK4B,UAAU,QAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,6BAAKL,KAAKL,MAAMlB,MAAME,OACtB,8BACGqB,KAAKL,MAAMlB,MAAMG,OADpB,MAC+BoB,KAAKL,MAAMlB,MAAMK,YAGjDkB,KAAKiB,sB,GAvCMR,IAAMC,YCEpBQ,E,4JACJ,WAAU,IAAD,OACP,OACE,qBAAKb,UAAU,YAAf,SACGL,KAAKL,MAAMrB,OAAOE,KAAI,SAACC,GACtB,OACE,cAAC,EAAD,CACEA,MAAOA,EAEPqC,UAAW,EAAKnB,MAAMmB,UACtBC,MAAO,EAAKpB,MAAMoB,MAClBC,SAAU,EAAKrB,MAAMqB,UAHhBvC,EAAMC,a,GARD+B,IAAMC,WAmBfQ,ICnBTC,G,kKACJ,WACE,OACE,sBAAKd,UAAU,gBAAf,UACE,yCACA,cAAC,EAAD,CAAW/B,OAAQ0B,KAAKL,MAAMyB,cAAeN,WAAW,EAAOC,MAAOf,KAAKL,MAAMoB,e,GAL7DN,IAAMC,YAUnBS,ICiBAE,G,wDA1Bb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IAED2B,iBAAmB,EAAKA,iBAAiBxB,KAAtB,gBAHP,E,oDAKnB,SAAiByB,GACfvB,KAAKL,MAAM6B,aAAaD,EAAErB,OAAOE,S,oBAGnC,WACE,OACE,sBAAKC,UAAU,WAAf,UACE,uBAAOoB,aAAc,eAAgBlB,SAAUP,KAAKsB,mBACpD,cAAC,EAAD,CACEhD,OAAQ0B,KAAKL,MAAMyB,cACnBN,WAAW,EACXF,SAAUZ,KAAKL,MAAMiB,SACrBI,SAAUhB,KAAKL,MAAMqB,WAEvB,wBAAQX,UAAU,gBAAgBG,QAASR,KAAKL,MAAM+B,OAAtD,oC,GApBejB,IAAMC,YCkFdiB,E,kDA9Eb,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXwB,cAAe,GACfnC,aAAc,eACd2C,eAAgB,IAElB,EAAKhB,SAAW,EAAKA,SAASd,KAAd,gBAChB,EAAKe,YAAc,EAAKA,YAAYf,KAAjB,gBACnB,EAAK+B,mBAAqB,EAAKA,mBAAmB/B,KAAxB,gBAC1B,EAAKd,aAAe,EAAKA,aAAac,KAAlB,gBACpB,EAAKlC,OAAS,EAAKA,OAAOkC,KAAZ,gBAZG,E,sDAenB,SAAmBnB,GACjBqB,KAAKG,SAAS,CAAElB,aAAcN,M,yBAGhC,SAAYF,GACV,IAAIH,EAAS0B,KAAKJ,MAAMgC,eAAeE,QAAO,SAACC,GAAD,OAAQA,EAAGrD,KAAOD,EAAMC,MACtEsB,KAAKG,SAAS,CAAEyB,eAAgBtD,M,sBAGlC,SAASG,GACP,IACEuB,KAAKJ,MAAMgC,eAAeI,MAAK,SAACC,GAAD,OAAgBA,EAAWvD,KAAOD,EAAMC,MADzE,CAKA,IAAIJ,EAAS0B,KAAKJ,MAAMgC,eACxBtD,EAAO4D,KAAKzD,GACZuB,KAAKG,SAAS,CAAEyB,eAAgBtD,O,0BAGlC,WAAgB,IAAD,OACTW,EAAee,KAAKJ,MAAMX,aAC1BC,EAAYc,KAAKJ,MAAMgC,eAAepD,KAAI,SAACC,GAAD,OAAWA,EAAMM,OAC/DjC,EAAQkC,aAAaC,EAAcC,GAAWjB,MAAK,WACjD,EAAKkC,SAAS,CACZlB,aAAc,eACd2C,eAAgB,U,oBAKtB,SAAO/B,GAAO,IAAD,OACX/C,EAAQc,OAAOiC,GAAM5B,MAAK,SAACmD,GACzB,EAAKjB,SAAS,CAAEiB,cAAeA,S,oBAInC,WACE,OACE,gCACE,oCACI,sBAAMf,UAAU,YAAhB,iBADJ,SAGA,sBAAKA,UAAU,MAAf,UACE,cAAC,EAAD,CAAWJ,SAAUD,KAAKpC,SAC1B,sBAAKyC,UAAU,eAAf,UACE,cAAC,EAAD,CACEe,cAAepB,KAAKJ,MAAMwB,cAC1BL,MAAOf,KAAKY,WAEd,cAAC,EAAD,CACEQ,cAAepB,KAAKJ,MAAMgC,eAC1BZ,SAAUhB,KAAKa,YACfW,aAAcxB,KAAK6B,mBACnBH,OAAQ1B,KAAKhB,4B,GAtETyB,IAAMC,WCGTyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpE,MAAK,YAAkD,IAA/CqE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f081c633.chunk.js","sourcesContent":["let accessToken;\r\nconst REDIRECT_URI = \"https://nicedevtryhard.github.io/jammming/\";\r\nconst CLIENT_ID = \"ad05e8525e354dee9284af8869e35ed5\";\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const AccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n    const ExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (AccessToken && ExpiresIn) {\r\n      accessToken = AccessToken[1];\r\n      const expiresIn = Number(ExpiresIn[1]);\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\");\r\n      return accessToken;\r\n    } else {\r\n      const accessURL = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;\r\n      window.location = accessURL;\r\n    }\r\n  },\r\n  search(searchTerm) {\r\n    return fetch(\r\n      `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\r\n      {\r\n        headers: { Authorization: `Bearer ${Spotify.getAccessToken()}` },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse) {\r\n          return [];\r\n        }\r\n        return jsonResponse.tracks.items.map((track) => {\r\n          return {\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri,\r\n          };\r\n        });\r\n      });\r\n  },\r\n\r\n  savePlaylist(playlistName, trackURIs) {\r\n    if (!playlistName || !trackURIs) {\r\n      return;\r\n    }\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userID;\r\n    return fetch(`https://api.spotify.com/v1/me`, { headers: headers })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n      })\r\n      .then((jsonResponse) => {\r\n        userID = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n          headers: headers,\r\n          method: \"POST\",\r\n          body: JSON.stringify({ name: playlistName }),\r\n        })\r\n          .then((response) => {\r\n            if (response.ok) {\r\n              return response.json();\r\n            }\r\n          })\r\n          .then((jsonResponse) => {\r\n            const playlistID = jsonResponse.id;\r\n            return fetch(\r\n              `https://api.spotify.com/v1/playlists/${playlistID}/tracks`,\r\n              {\r\n                headers: headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({\r\n                  uris: trackURIs,\r\n                }),\r\n              }\r\n            );\r\n          });\r\n      });\r\n  },\r\n};\r\n\r\nexport default Spotify;\r\n","import React from \"react\";\r\n\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: \"\",\r\n    };\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n  search() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n  handleTermChange({ target }) {\r\n    this.setState({ term: target.value });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input\r\n          placeholder=\"Enter A Song, Album, or Artist\"\r\n          onChange={this.handleTermChange}\r\n        />\r\n        <button className=\"SearchButton\" onClick={this.search}>\r\n          SEARCH\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nimport \"./Track.css\";\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  renderAction() {\r\n    if (!this.props.isRemoval) {\r\n      return (\r\n        <button className=\"Track-action\" onClick={this.addTrack}>\r\n          +\r\n        </button>\r\n      );\r\n    }\r\n    return (\r\n      <button className=\"Track-action\" onClick={this.removeTrack}>\r\n        -\r\n      </button>\r\n    );\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>\r\n            {this.props.track.artist} | {this.props.track.album}\r\n          </p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React from \"react\";\r\n\r\nimport \"./TrackList.css\";\r\n\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {this.props.tracks.map((track) => {\r\n          return (\r\n            <Track\r\n              track={track}\r\n              key={track.id}\r\n              isRemoval={this.props.isRemoval}\r\n              onAdd={this.props.onAdd}\r\n              onRemove={this.props.onRemove}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TrackList;\r\n","import React from \"react\";\r\n\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nimport './SearchResults.css';\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList tracks={this.props.searchResults} isRemoval={false} onAdd={this.props.onAdd}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default SearchResults;","import React from \"react\";\r\n\r\nimport \"./Playlist.css\";\r\n\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n  handleNameChange(e) {\r\n    this.props.onNameChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\r\n        <TrackList\r\n          tracks={this.props.searchResults}\r\n          isRemoval={true}\r\n          addTrack={this.props.addTrack}\r\n          onRemove={this.props.onRemove}\r\n        />\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>\r\n          SAVE TO SPOTIFY\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Playlist;\r\n","import React from \"react\";\n\nimport \"./App.css\";\n\nimport Spotify from \"../../util/Spotify\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks.filter((el) => el.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  addTrack(track) {\n    if (\n      this.state.playlistTracks.find((savedTrack) => savedTrack.id === track.id)\n    ) {\n      return;\n    }\n    let tracks = this.state.playlistTracks;\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  savePlaylist() {\n    let playlistName = this.state.playlistName;\n    let trackURIs = this.state.playlistTracks.map((track) => track.uri);\n    Spotify.savePlaylist(playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: [],\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then((searchResults) => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              searchResults={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}